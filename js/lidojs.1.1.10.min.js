!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.editolido=e():t.editolido=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var N=e[r]={i:r,l:!1,exports:{}};return t[r].call(N.exports,N,N.exports,n),N.l=!0,N.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var N in t)n.d(r,N,function(e){return t[e]}.bind(null,N));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){for(var n="0123456789bcdefghjkmnpqrstuvwxyz",r={},N=0;N<n.length;N++)r[n.charAt(N)]=N;var i=[0,5,7,8,11,12,13,15,16,17,18],o=function(t,e,r){if("auto"===r){if("number"==typeof t||"number"==typeof e)throw new Error("string notation required for auto precision.");var N=t.split(".")[1].length,o=e.split(".")[1].length,u=Math.max(N,o);r=i[u]}else void 0===r&&(r=9);for(var s,a=[],l=0,c=0,A=0,E=90,d=-90,O=180,p=-180;a.length<r;)if(c%2==0?e>(s=(O+p)/2)?(A=1+(A<<1),p=s):(A=0+(A<<1),O=s):t>(s=(E+d)/2)?(A=1+(A<<1),d=s):(A=0+(A<<1),E=s),c++,5===++l){var h=n[A];a.push(h),l=0,A=0}return a.join("")},u=function(t,e,n){n=n||52;for(var r,N=0,i=90,o=-90,u=180,s=-180,a=0;N<n;)a*=2,N%2==0?e>(r=(u+s)/2)?(a+=1,s=r):u=r:t>(r=(i+o)/2)?(a+=1,o=r):i=r,N++;return a},s=function(t){for(var e,n=!0,N=90,i=-90,o=180,u=-180,s=0,a=0,l=t.length;a<l;a++){var c=t[a].toLowerCase();s=r[c];for(var A=4;A>=0;A--){var E=s>>A&1;n?(e=(o+u)/2,1===E?u=e:o=e):(e=(N+i)/2,1===E?i=e:N=e),n=!n}}return[i,u,N,o]},a=function(t,e){for(var n=90,r=-90,N=180,i=-180,o=0,u=(e=e||52)/2,s=0;s<u;s++)o=l(t,2*(u-s)-1),0===l(t,2*(u-s)-2)?n=(n+r)/2:r=(n+r)/2,0===o?N=(N+i)/2:i=(N+i)/2;return[r,i,n,N]};function l(t,e){return t/Math.pow(2,e)&1}var c=function(t){var e=s(t),n=(e[0]+e[2])/2,r=(e[1]+e[3])/2;return{latitude:n,longitude:r,error:{latitude:e[2]-n,longitude:e[3]-r}}},A=function(t,e){var n=a(t,e),r=(n[0]+n[2])/2,N=(n[1]+n[3])/2;return{latitude:r,longitude:N,error:{latitude:n[2]-r,longitude:n[3]-N}}},E=function(t,e){var n=c(t),r=n.latitude+e[0]*n.error.latitude*2,N=n.longitude+e[1]*n.error.longitude*2;return N=O(N),r=p(r),o(r,N,t.length)},d=function(t,e,n){var r=A(t,n=n||52),N=r.latitude+e[0]*r.error.latitude*2,i=r.longitude+e[1]*r.error.longitude*2;return i=O(i),N=p(N),u(N,i,n)};function O(t){return t>180?t%180-180:t<-180?180+t%180:t}function p(t){return t>90?90:t<-90?-90:t}var h={ENCODE_AUTO:"auto",encode:o,encode_uint64:u,encode_int:u,decode:c,decode_int:A,decode_uint64:A,decode_bbox:s,decode_bbox_uint64:a,decode_bbox_int:a,neighbor:E,neighbor_int:d,neighbors:function(t){var e,n,r=t.length,N=c(t),i=N.latitude,u=N.longitude,s=2*N.error.latitude,a=2*N.error.longitude;function l(t,N){return e=i+t*s,n=O(n=u+N*a),e=p(e),o(e,n,r)}return[l(1,0),l(1,1),l(0,1),l(-1,1),l(-1,0),l(-1,-1),l(0,-1),l(1,-1)]},neighbors_int:function(t,e){var n,r,N=A(t,e=e||52),i=N.latitude,o=N.longitude,s=2*N.error.latitude,a=2*N.error.longitude;function l(t,N){return n=i+t*s,r=O(r=o+N*a),n=p(n),u(n,r,e)}return[l(1,0),l(1,1),l(0,1),l(-1,1),l(-1,0),l(-1,-1),l(0,-1),l(1,-1)]},bboxes:function(t,e,n,r,N){for(var i=o(t,e,N=N||9),u=o(n,r,N),a=c(i),l=2*a.error.latitude,A=2*a.error.longitude,d=s(i),O=s(u),p=Math.round((O[0]-d[0])/l),h=Math.round((O[1]-d[1])/A),I=[],f=0;f<=p;f++)for(var S=0;S<=h;S++)I.push(E(i,[f,S]));return I},bboxes_int:function(t,e,n,r,N){for(var i=u(t,e,N=N||52),o=u(n,r,N),s=A(i,N),l=2*s.error.latitude,c=2*s.error.longitude,E=a(i,N),O=a(o,N),p=Math.round((O[0]-E[0])/l),h=Math.round((O[1]-E[1])/c),I=[],f=0;f<=p;f++)for(var S=0;S<=h;S++)I.push(d(i,[f,S],N));return I}};t.exports=h},function(t,e,n){t.exports=n(3)},function(t){t.exports=JSON.parse('{"2515N":[25,-15],"2520N":[25,-20],"2523N":[25,-23],"2620N":[26,-20],"2622N":[26,-22],"2720N":[27,-20],"2723N":[27,-23],"2820N":[28,-20],"2822N":[28,-22],"2920N":[29,-20],"2A17N":[25.52,-17.95],"3015N":[30,-15],"96GDV":[25,-16.636667],"AGUMO":[25.710556,-18.596111],"APASO":[25,-19.504633],"ARACO":[28.432519,-17.452331],"ARENA":[25.728086,-14.358589],"ARTEM":[28.409036,-16.034147],"BAMEL":[28.111333,-16.87725],"BASUX":[28.621278,-16.7585],"BETAN":[28.410264,-14.251903],"BIPET":[25,-16.358806],"BRICK":[29.591367,-16.372894],"CABEL":[25,-14.941136],"CABOJ":[26.138889,-14.643889],"CANDE":[28.323583,-15.88475],"CANIS":[27.999825,-14.648167],"COLON":[28.3285,-15.242031],"DELAP":[28.297111,-15.564194],"DEPIS":[28.187917,-17.822472],"DEREV":[26.723172,-15.211056],"DIRUP":[31.502472,-16.994944],"DRANO":[27.655656,-15.506769],"ECKOS":[28.040089,-15.33965],"ENETA":[27.924889,-14.994014],"FAYTA":[28.108569,-14.1381],"GANTA":[28.274869,-17.170528],"GOMER":[28,-17.333333],"GURKA":[30.434,-15.850258],"ISLET":[28.142786,-15.295128],"ISORU":[28.626989,-15.236125],"KASAS":[29.986417,-15.768719],"KONBA":[31.300833,-15.301667],"KONDA":[27.744931,-15.806853],"KOPUD":[28.139722,-14.507778],"KOSIB":[28.586667,-14.213333],"LALTO":[27.698119,-15.003958],"LARYS":[28.871831,-14.834289],"LIMAL":[25,-17.625581],"LOMAS":[27.720444,-15.691056],"LORPO":[28.215833,-14.651667],"MADAS":[28.220975,-15.378922],"MAPED":[28.918778,-14.083],"MARBA":[28.558494,-16.570908],"MATUD":[27.479194,-15.867194],"MERAN":[27.8565,-16.185667],"MITLA":[31.308333,-14.082222],"MOROD":[28.454603,-17.210964],"MOVAS":[27.726028,-16.801389],"NASOL":[28.840458,-17.427206],"NELSO":[31.682914,-17.456994],"NERVO":[29.338578,-15.652008],"NEXUX":[30,-21],"ODEGI":[26.894583,-16.290111],"OPTIK":[27.002456,-17.008594],"ORVEK":[25.975,-18.813889],"PEPAT":[28.428333,-14.186667],"PEPES":[30.617772,-14.265825],"PITAB":[30.352869,-16.449236],"R002P":[28.803031,-16.294683],"R010P":[28.803575,-16.252281],"R024P":[28.792056,-16.179531],"R041P":[28.75775,-16.098711],"R053P":[28.721636,-16.050314],"R082P":[28.604783,-15.976219],"R108P":[28.484547,-15.972181],"R129P":[28.394061,-16.013108],"R191P":[28.269947,-16.290992],"R216P":[28.303056,-16.416283],"R240P":[28.376097,-16.511028],"R265P":[28.481447,-16.565253],"R272P":[28.513733,-16.570703],"R300P":[28.641497,-16.547719],"R328P":[28.744742,-16.459331],"R356P":[28.799203,-16.326156],"RASEP":[28.694167,-14.446667],"REMGI":[27.090194,-15.269611],"ROSTA":[28.256056,-20],"ROTUM":[25,-15.78675],"RULOB":[28.751389,-14.016667],"SAMAR":[30.899722,-14.415556],"SARAY":[29.758633,-14.157431],"SIERA":[28.083333,-14.491667],"SIRPU":[28.165028,-14.106639],"SORAD":[30,-25],"TANGO":[27.613333,-15.262778],"TENAR":[28.048431,-15.935892],"TERFE":[28.190417,-16.129472],"TESEL":[28.488286,-16.833256],"THAIS":[28.572225,-15.517825],"TMA2 ":[25,-18.28],"TODKO":[28.316667,-15.345222],"TOMOS":[27.5475,-15.553258],"TUPIK":[27.890833,-14.745556],"UDATI":[26.197778,-16.786389],"VANUR":[28.707944,-17.610444],"VIDRI":[26.894583,-17.039917],"070A ":[69.5,-70],"070B ":[68.5,-70],"070C ":[67.5,-70],"070D ":[66.5,-70],"070N ":[70.857689,-70],"4550N":[45,-50],"4555N":[45,-55],"4560N":[45,-60],"4561N":[45,-61],"4562N":[45,-62],"4563N":[45,-63],"4564N":[45,-64],"4565N":[45,-65],"4566N":[45,-66],"4567N":[45,-67],"4635N":[46,-35],"4640N":[46,-40],"4645N":[46,-45],"4650N":[46,-50],"4655N":[46,-55],"4660N":[46,-60],"4735N":[47,-35],"4740N":[47,-40],"4745N":[47,-45],"4750N":[47,-50],"4760N":[47,-60],"4835N":[48,-35],"4840N":[48,-40],"4845N":[48,-45],"4850N":[48,-50],"4860N":[48,-60],"4930N":[49,-30],"4935N":[49,-35],"4940N":[49,-40],"4945N":[49,-45],"4950N":[49,-50],"4960N":[49,-60],"4A64N":[44.166667,-64],"5030N":[50,-30],"5035N":[50,-35],"5040N":[50,-40],"5045N":[50,-45],"5050N":[50,-50],"5055N":[50,-55],"5060N":[50,-60],"5065N":[50,-65],"5130N":[51,-30],"5135N":[51,-35],"5140N":[51,-40],"5145N":[51,-45],"5150N":[51,-50],"5160N":[51,-60],"5170N":[51,-70],"5230N":[52,-30],"5235N":[52,-35],"5240N":[52,-40],"5245N":[52,-45],"5250N":[52,-50],"5260N":[52,-60],"5265N":[52,-65],"5270N":[52,-70],"5330N":[53,-30],"5335N":[53,-35],"5340N":[53,-40],"5345N":[53,-45],"5350N":[53,-50],"5360N":[53,-60],"5370N":[53,-70],"5430N":[54,-30],"5435N":[54,-35],"5440N":[54,-40],"5445N":[54,-45],"5450N":[54,-50],"5455N":[54,-55],"5460N":[54,-60],"5470N":[54,-70],"5530N":[55,-30],"5535N":[55,-35],"5540N":[55,-40],"5545N":[55,-45],"5550N":[55,-50],"5555N":[55,-55],"5560N":[55,-60],"5561N":[55,-61],"5562N":[55,-62],"5563N":[55,-63],"5564N":[55,-64],"5565N":[55,-65],"5566N":[55,-66],"5567N":[55,-67],"5568N":[55,-68],"5569N":[55,-69],"5570N":[55,-70],"5630N":[56,-30],"5631N":[56,-31],"5635N":[56,-35],"5640N":[56,-40],"5645N":[56,-45],"5650N":[56,-50],"5655N":[56,-55],"5660N":[56,-60],"5670N":[56,-70],"5730N":[57,-30],"5735N":[57,-35],"5740N":[57,-40],"5745N":[57,-45],"5750N":[57,-50],"5755N":[57,-55],"5760N":[57,-60],"5770N":[57,-70],"5830N":[58,-30],"5835N":[58,-35],"5840N":[58,-40],"5845N":[58,-45],"5850N":[58,-50],"5855N":[58,-55],"5860N":[58,-60],"5870N":[58,-70],"5930N":[59,-30],"5935N":[59,-35],"5940N":[59,-40],"5950N":[59,-50],"5955N":[59,-55],"5960N":[59,-60],"5970N":[59,-70],"5A70N":[56.416667,-70],"6030N":[60,-30],"6035N":[60,-35],"6040N":[60,-40],"6055N":[60,-55],"6058N":[60,-58],"6060N":[60,-60],"6064N":[60,-64],"6130N":[61,-30],"6135N":[61,-35],"6140N":[61,-40],"6150N":[61,-50],"6155N":[61,-55],"6160N":[61,-60],"6170N":[61,-70],"6235N":[62,-35],"6240N":[62,-40],"6250N":[62,-50],"6255N":[62,-55],"6260N":[62,-60],"6270N":[62,-70],"6360N":[63,-60],"6460N":[64,-60],"6560N":[65,-60],"6570N":[65,-70],"6650N":[66,-50],"6670N":[66,-70],"6750N":[67,-50],"6770N":[67,-70],"6860N":[68,-60],"6870N":[68,-70],"6960N":[69,-60],"6970N":[69,-70],"6A21N":[69.666667,-21.5],"6A70N":[69.25,-70],"7065N":[70,-65],"7070N":[70,-70],"7160N":[71,-60],"7170N":[71,-70],"7260N":[72,-60],"7270N":[72,-70],"7370N":[73,-70],"7470N":[74,-70],"7560N":[75,-60],"8070N":[80,-70],"ACADN":[44.666667,-64],"ADRAX":[45.958611,-66.198333],"ADSAM":[69.921147,-63.219894],"ALKOB":[51.480106,-64.024186],"ALLRY":[50.5,-52],"ALSAK":[64,-70],"ALSOP":[56.866667,-62.166667],"AMASS":[61.038153,-68.515992],"ANDRE":[68.5025,-51.024167],"ARAME":[51.338319,-67.462178],"ARDEE":[45.123442,-64.386064],"ATLAN":[46.76,-57.115556],"AVPUT":[65.033333,-60],"AVUTI":[57.466667,-58],"AYROU":[65.315003,-64],"BAGLE":[46.091694,-66.903667],"BEPEG":[63,-70],"BERAK":[65.5,-70],"BERUS":[63,-63],"BEZED":[64.866667,-67],"BITRA":[45.106389,-61.878889],"BIVPU":[46.034839,-67.780967],"BOBBS":[51.001667,-61.999167],"BODGO":[53.249411,-60.569842],"BOKTO":[56.966667,-58],"BOPUT":[68.959436,-61.941169],"BORUB":[52.539167,-63.123333],"BRIDG":[47.146389,-59.271389],"BROME":[53.500075,-66.999325],"BUBIX":[49.327586,-67.374836],"BUDAR":[50,-52],"BUDUM":[80,-69.25],"CAAPE":[45.300008,-65.296142],"CADIL":[47.735,-60.425],"CANEL":[67.983856,-60.764025],"CASTR":[48.866667,-66.833333],"CLAVY":[64.233333,-59],"COPUR":[59.7,-67],"CUDDY":[56.7,-57],"DANOL":[45.698389,-67.788072],"DAPAK":[73.75,-70],"DARUB":[67,-60],"DAYSE":[46.795,-58.606667],"DOPHN":[44.555033,-55.482339],"DORYY":[56.033333,-57],"DUSEN":[44.9974,-64.196483],"DUSER":[49.130333,-54.507167],"DUTUM":[63.866667,-67],"DUVBI":[56,-61],"DUVIN":[43.706167,-67],"DUVOK":[44.927036,-65.286572],"ELERI":[42.5745,-64.390183],"ELSIR":[49.5,-52],"EMBIM":[45.439197,-67.465761],"EMBOK":[63.466667,-58],"ENNSO":[55.533333,-57],"EPMAN":[66,-60],"EXPOS":[52,-67],"FASSA":[58.7,-67],"FEDDY":[61.700222,-66.998844],"FINNI":[49.001667,-57.74],"FORTE":[46.28,-57.66],"FOXXE":[54.486667,-59.288333],"FRAZR":[51.616667,-62.716667],"FRENN":[45.971744,-66.214786],"FROSS":[48.153333,-61.241667],"GAYBL":[42.833333,-62],"GOLFE":[52.263889,-63.435],"GRAYY":[45.746667,-56.71],"GRIBS":[61.5,-63],"GRUPI":[43.866733,-58.837528],"HARBO":[47.594011,-53.355786],"HEMMI":[45.055,-55.533333],"HIDIG":[44.680622,-64.016106],"HINGE":[57.408333,-65],"HITOR":[49.085,-61.7],"HOIST":[55.033333,-57],"IBERG":[49,-52],"IGTAS":[45.082911,-62.989708],"IKBUN":[48.8,-56.065],"IKMAN":[62.5,-63],"IKNAL":[58.264167,-67.718056],"IKNOG":[65.904572,-58.583492],"IMAMA":[46.738283,-67.777553],"INGUM":[71.881111,-66.281667],"IRBIM":[58.653333,-60.532622],"IRDUV":[46.274042,-65.158797],"IRGUB":[45.695411,-67.8194],"IRLOK":[54.533333,-57],"ITPAX":[46.113931,-65.160389],"JANJO":[54.033333,-57],"JELCO":[60.7,-67],"JETAM":[46.734583,-67.762153],"JEXAT":[44.888011,-66.970683],"JIGGS":[47.42,-59.803333],"JOOPY":[48.5,-52],"JOVIE":[54.166667,-67],"JULES":[54.853897,-66.845219],"JULET":[72.767286,-68.664953],"KAGLY":[63.5,-63],"KATLO":[45.296944,-63.050833],"KATMU":[46.088333,-60.011667],"KATPA":[52.703122,-67.007447],"KAVPO":[54.498553,-66.772392],"KELNO":[45.131567,-64.189561],"KENKI":[65,-63],"KENSU":[45.974842,-65.95265],"KETLA":[62.466667,-58],"KEVLU":[44.422778,-64.183333],"KLIPS":[57.700158,-66.999197],"KODIK":[53.466667,-57.2],"KONCH":[51.8,-60.216667],"LAKES":[57.998333,-63.266667],"LARDR":[45.296944,-63.519444],"LEXAK":[47.401594,-53.403286],"LEXOD":[48.516667,-66.333333],"LIBOR":[61.966667,-58],"LOHIL":[54.840394,-68.999372],"LOMSI":[53.1,-56.783333],"LOMTA":[57.203333,-62.62],"LOPRO":[48.7225,-57.703611],"LOPVI":[59.266667,-64.25],"MALPE":[46.722222,-63.404167],"MAXAR":[61.466667,-58],"MCKEE":[56.671667,-67],"MEDPA":[72.661044,-67.713336],"MELDI":[52.733333,-56.35],"MIBNO":[60.583333,-62.533333],"MIGLI":[49.525833,-58.246667],"MIILS":[46.873611,-67.048333],"MIVAD":[47.679444,-54.150833],"MOATT":[58.025,-59.928333],"MOWND":[45.376667,-66.657222],"MUNBO":[52.124167,-64.799722],"MUSAK":[48,-52],"MUSLO":[60.166667,-62],"MUSVA":[64,-63],"MUVEP":[58.116333,-68.383667],"N4560":[45.5,-60],"N4760":[47.5,-60],"N4860":[48.5,-60],"N4960":[49.5,-60],"N5060":[50.5,-60],"N5070":[50.5,-70],"N5160":[51.5,-60],"N5170":[51.5,-70],"N5260":[52.5,-60],"N5270":[52.5,-70],"N5370":[53.5,-70],"N5470":[54.5,-70],"N5570":[55.5,-70],"N5770":[57.5,-70],"N5870":[58.5,-70],"N5970":[59.5,-70],"N6070":[60.5,-70],"N6170":[61.5,-70],"N6270":[62.5,-70],"N6370":[63.5,-70],"N6470":[64.5,-70],"N7070":[70.5,-70],"N7170":[71.5,-70],"N7270":[72.5,-70],"NADMA":[71.067208,-64.926264],"NALDI":[64.5,-63],"NANSO":[44.488333,-56.071667],"NAPLO":[50.227222,-58.765278],"NEEKO":[52.4,-55.833333],"NICSO":[47.5,-52],"NIFTY":[60.966667,-58],"NORUS":[51.887872,-66.617239],"NOTOP":[45.452633,-62.011914],"NUTBY":[45.687536,-63.246694],"OBSAT":[51.333333,-69.5],"ODKAP":[50.883889,-66.059167],"OLESU":[48.197347,-63.256433],"OMSAT":[47,-52],"OTAKU":[63.116667,-68.866667],"PAULO":[45.253003,-63.335458],"PEKRO":[53.156389,-64.1025],"PELSI":[58.083333,-67],"PELTU":[52.1,-55.166667],"PEPKI":[59.733333,-61.616667],"PEPRA":[44.937222,-56.231667],"PERLU":[47.290147,-54.046161],"PIDSO":[60.466667,-58],"PIKNA":[50.866667,-59.25],"PORGY":[56.316667,-58.083333],"PORTI":[46.5,-52],"PRAWN":[57.203333,-59.18],"PUPUN":[50.370158,-66.020636],"PUXOP":[45.944722,-66.44],"QUBIS":[47.533375,-67.766136],"RADUN":[59.966667,-58],"RELIC":[46,-52],"RENNY":[48.413333,-61.816667],"RIKAL":[51.8,-54.533333],"ROBBE":[51.143333,-70],"RODBO":[60.083333,-65.166667],"RUBDA":[45.794167,-56.547778],"RUBKO":[52.333333,-60.966667],"SATIS":[50.422278,-59.981589],"SATUX":[45.933494,-66.186731],"SAVRY":[59.466667,-58],"SAXAN":[51.483333,-53.85],"SCOTS":[44.5,-64],"SELAT":[49.032294,-54.535544],"SEMTO":[59.233333,-67],"SENVI":[44.733583,-64.165564],"SERBO":[52.101667,-60.716389],"SERNI":[55.0875,-66.883167],"SETVO":[60.416667,-67],"SHAIK":[51.557939,-66.546803],"SILRO":[47,-58.583333],"SINGA":[59.216667,-61.083333],"SPOTE":[52.47,-67],"SUPRY":[45.5,-52],"SUTKO":[46.515833,-56.821667],"TAFFY":[47.373381,-67.3039],"TAGRA":[47.178333,-57.078889],"TALGO":[44.166667,-52.433333],"TASTI":[52.663333,-61.653611],"TEALS":[55.648611,-67],"TEFFO":[62.800244,-66.998808],"TEXED":[47.545833,-54.152778],"TEXUN":[53,-61.85],"TIGOR":[47.4152,-54.113928],"TOXIT":[58.966667,-58],"TUDEP":[51.166667,-53.233333],"TUNNI":[60,-70],"UBTEV":[48.746833,-65.034],"UDMAR":[57.583333,-62.916667],"UDMOG":[50.207925,-66.674583],"UKOSO":[44.894722,-63.641944],"UMESI":[50.833333,-52.6],"UMETI":[47.58,-59.258056],"URTAK":[58.466667,-58],"USBAM":[47.6295,-63.208167],"VERCH":[58.215556,-65],"VERTU":[51.504444,-59.756944],"VESMI":[57.966667,-58],"VIGDU":[45.472358,-67.483856],"VIGMA":[44.340875,-66.643511],"VIGSO":[50.298492,-60.943147],"VINSI":[47.898333,-57.366667],"VITON":[65.9,-58.583333],"VODEK":[63.833333,-70],"VOKAR":[53.5,-62.566667],"VOKET":[51.5,-67],"WOPAC":[48.656711,-67.307767],"WUPUP":[46.653792,-67.732661],"XIBUL":[45.294939,-67.454464],"2527N":[25,-27],"2528N":[25,-28],"2529N":[25,-29],"2530N":[25,-30],"2531N":[25,-31],"2533N":[25,-33],"2534N":[25,-34],"2535N":[25,-35],"2536N":[25,-36],"2626N":[26,-26],"2635N":[26,-35],"2730N":[27,-30],"2735N":[27,-35],"2830N":[28,-30],"2835N":[28,-35],"2930N":[29,-30],"2935N":[29,-35],"2A25N":[25.666667,-25],"2B35N":[26.266667,-35],"3026N":[30,-26],"3027N":[30,-27],"3028N":[30,-28],"3029N":[30,-29],"3030N":[30,-30],"3031N":[30,-31],"3032N":[30,-32],"3033N":[30,-33],"3034N":[30,-34],"3035N":[30,-35],"3120N":[31,-20],"3125N":[31,-25],"3130N":[31,-30],"3135N":[31,-35],"3220N":[32,-20],"3225N":[32,-25],"3230N":[32,-30],"3235N":[32,-35],"3319N":[33,-19],"3320N":[33,-20],"3325N":[33,-25],"3330N":[33,-30],"3335N":[33,-35],"3419N":[34,-19],"3420N":[34,-20],"3425N":[34,-25],"3430N":[34,-30],"3435N":[34,-35],"3515N":[35,-15],"3516N":[35,-16],"3517N":[35,-17],"3518N":[35,-18],"3519N":[35,-19],"3520N":[35,-20],"3521N":[35,-21],"3522N":[35,-22],"3523N":[35,-23],"3525N":[35,-25],"3526N":[35,-26],"3527N":[35,-27],"3528N":[35,-28],"3529N":[35,-29],"3530N":[35,-30],"3532N":[35,-32],"3535N":[35,-35],"3620N":[36,-20],"3625N":[36,-25],"3630N":[36,-30],"3635N":[36,-35],"3720N":[37,-20],"3725N":[37,-25],"3730N":[37,-30],"3735N":[37,-35],"3820N":[38,-20],"3825N":[38,-25],"3830N":[38,-30],"3835N":[38,-35],"3920N":[39,-20],"3925N":[39,-25],"3930N":[39,-30],"3935N":[39,-35],"3A25N":[39.183333,-25],"3A35N":[32.533333,-35],"3B16N":[32.773333,-16.561667],"3C35N":[36.616667,-35],"4017N":[40,-17],"4018N":[40,-18],"4019N":[40,-19],"4020N":[40,-20],"4021N":[40,-21],"4022N":[40,-22],"4023N":[40,-23],"4024N":[40,-24],"4025N":[40,-25],"4026N":[40,-26],"4027N":[40,-27],"4030N":[40,-30],"4035N":[40,-35],"4120N":[41,-20],"4125N":[41,-25],"4130N":[41,-30],"4135N":[41,-35],"4216N":[42,-16],"4220N":[42,-20],"4225N":[42,-25],"4230N":[42,-30],"4235N":[42,-35],"4310N":[43,-10],"4315N":[43,-15],"4320N":[43,-20],"4325N":[43,-25],"4330N":[43,-30],"4335N":[43,-35],"4410N":[44,-10],"4415N":[44,-15],"4420N":[44,-20],"4425N":[44,-25],"4430N":[44,-30],"4435N":[44,-35],"4508N":[45,-8],"4515N":[45,-15],"4516N":[45,-16],"4517N":[45,-17],"4518N":[45,-18],"4519N":[45,-19],"4520N":[45,-20],"4521N":[45,-21],"4524N":[45,-24],"4525N":[45,-25],"4527N":[45,-27],"4530N":[45,-30],"4532N":[45,-32],"4535N":[45,-35],"4610N":[46,-10],"4615N":[46,-15],"4620N":[46,-20],"4625N":[46,-25],"4630N":[46,-30],"4710N":[47,-10],"4715N":[47,-15],"4720N":[47,-20],"4725N":[47,-25],"4730N":[47,-30],"4809N":[48,-9],"4810N":[48,-10],"4815N":[48,-15],"4820N":[48,-20],"4825N":[48,-25],"4830N":[48,-30],"4920N":[49,-20],"4925N":[49,-25],"4A13N":[44.416667,-13],"5016N":[50,-16],"5020N":[50,-20],"5025N":[50,-25],"5120N":[51,-20],"5125N":[51,-25],"5220N":[52,-20],"5225N":[52,-25],"5320N":[53,-20],"5325N":[53,-25],"5420N":[54,-20],"5425N":[54,-25],"5516N":[55,-16],"5517N":[55,-17],"5520N":[55,-20],"5525N":[55,-25],"5620N":[56,-20],"5625N":[56,-25],"5720N":[57,-20],"5725N":[57,-25],"5815N":[58,-15],"5820N":[58,-20],"5825N":[58,-25],"5915N":[59,-15],"5920N":[59,-20],"5925N":[59,-25],"5945N":[59,-45],"6000E":[60,0],"6015N":[60,-15],"6016N":[60,-16],"6019N":[60,-19],"6020N":[60,-20],"6025N":[60,-25],"6045N":[60,-45],"6050N":[60,-50],"6101N":[61,-1],"6112N":[61,-12],"6114N":[61,-14],"6115N":[61,-15],"6116N":[61,-16],"6120N":[61,-20],"6125N":[61,-25],"6145N":[61,-45],"6210N":[62,-10],"6215N":[62,-15],"6220N":[62,-20],"6225N":[62,-25],"6230N":[62,-30],"6245N":[62,-45],"6310N":[63,-10],"6315N":[63,-15],"6320N":[63,-20],"6322N":[63,-22],"6330N":[63,-30],"6335N":[63,-35],"6340N":[63,-40],"6345N":[63,-45],"6350N":[63,-50],"6355N":[63,-55],"6400E":[64,0],"6410N":[64,-10],"6415N":[64,-15],"6420N":[64,-20],"6430N":[64,-30],"6435N":[64,-35],"6440N":[64,-40],"6445N":[64,-45],"6450N":[64,-50],"6455N":[64,-55],"6500E":[65,0],"6501N":[65,-1],"6503E":[65,0.125],"6505N":[65,-5],"6510N":[65,-10],"6515N":[65,-15],"6520N":[65,-20],"6530N":[65,-30],"6535N":[65,-35],"6536N":[65,-36],"6540N":[65,-40],"6542N":[65,-42],"6545N":[65,-45],"6546N":[65,-46],"6548N":[65,-48],"6550N":[65,-50],"6555N":[65,-55],"6610N":[66,-10],"6620N":[66,-20],"6630N":[66,-30],"6634N":[66,-34],"6638N":[66,-38],"6640N":[66,-40],"6642N":[66,-42],"6645N":[66,-45],"6648N":[66,-48],"6710N":[67,-10],"6719N":[67,-19],"6720N":[67,-20],"6730N":[67,-30],"6732N":[67,-32],"6734N":[67,-34],"6740N":[67,-40],"6744N":[67,-44],"6746N":[67,-46],"6748N":[67,-48],"6810N":[68,-10],"6820N":[68,-20],"6826N":[68,-26],"6830N":[68,-30],"6832N":[68,-32],"6840N":[68,-40],"6844N":[68,-44],"6850N":[68,-50],"6910N":[69,-10],"6920N":[69,-20],"6924N":[69,-24],"6926N":[69,-26],"6930N":[69,-30],"6940N":[69,-40],"6944N":[69,-44],"6946N":[69,-46],"6950N":[69,-50],"6951N":[69,-51],"6A22N":[69.5,-22.666667],"6A44N":[66,-44.616667],"6B22N":[69.416667,-22.5],"7010N":[70,-10],"7020N":[70,-20],"7026N":[70,-26],"7028N":[70,-28],"7030N":[70,-30],"7040N":[70,-40],"7046N":[70,-46],"7050N":[70,-50],"7060N":[70,-60],"7110N":[71,-10],"7120N":[71,-20],"7123N":[71,-23],"7124N":[71,-24],"7128N":[71,-28],"7130N":[71,-30],"7140N":[71,-40],"7146N":[71,-46],"7148N":[71,-48],"7150N":[71,-50],"7210N":[72,-10],"7220N":[72,-20],"7221N":[72,-21],"7224N":[72,-24],"7230N":[72,-30],"7240N":[72,-40],"7248N":[72,-48],"7250N":[72,-50],"7257N":[72,-57],"7310N":[73,-10],"7320N":[73,-20],"7321N":[73,-21],"7324N":[73,-24],"7330N":[73,-30],"7340N":[73,-40],"7350N":[73,-50],"7360N":[73,-60],"7410N":[74,-10],"7420N":[74,-20],"7421N":[74,-21],"7430N":[74,-30],"7440N":[74,-40],"7450N":[74,-50],"7460N":[74,-60],"7510N":[75,-10],"7520N":[75,-20],"7521N":[75,-21],"7530N":[75,-30],"7540N":[75,-40],"7550N":[75,-50],"7570N":[75,-70],"7610N":[76,-10],"7620N":[76,-20],"7621N":[76,-21],"7630N":[76,-30],"7640N":[76,-40],"7650N":[76,-50],"7660N":[76,-60],"7670N":[76,-70],"7710N":[77,-10],"7720N":[77,-20],"7721N":[77,-21],"7730N":[77,-30],"7740N":[77,-40],"7750N":[77,-50],"7760N":[77,-60],"7770N":[77,-70],"7810N":[78,-10],"7820N":[78,-20],"7821N":[78,-21],"7830N":[78,-30],"7840N":[78,-40],"7850N":[78,-50],"7860N":[78,-60],"7870N":[78,-70],"7910N":[79,-10],"7920N":[79,-20],"7921N":[79,-21],"7930N":[79,-30],"7940N":[79,-40],"7950N":[79,-50],"7960N":[79,-60],"7970N":[79,-70],"7A20N":[79.583333,-20],"8010N":[80,-10],"8020N":[80,-20],"8021N":[80,-21],"8030N":[80,-30],"8040N":[80,-40],"8050N":[80,-50],"8060N":[80,-60],"8069N":[80,-69],"ABALO":[32.331008,-18.130353],"ABANA":[67.468611,-50.968333],"ABIBA":[72,-57.181111],"ABUSU":[32.867011,-16.635542],"ABVID":[35.448056,-15.332778],"ADAGO":[32.956894,-16.345311],"ADARA":[51.5,-15],"ADAVA":[65.523589,-51.257569],"ADBUS":[54.416667,-12.5],"ADODO":[58.5,-10],"ADROX":[44.346639,-8.814444],"ADSOL":[37.958739,-26.076656],"ADVUN":[65.85525,-18.435342],"AGNAX":[60.957469,2.316667],"AGORI":[57,-13],"AKIVO":[59.964444,-9.5],"AKOSU":[61.180556,2.658114],"ALDAN":[62.980278,-18.763889],"ALLOY":[61.356111,1.788333],"AMDEP":[51.566667,-11.216667],"AMINI":[66.516944,-50.395],"AMIXI":[37.478333,-25.51],"AMLAD":[56.264444,-10],"AMTAP":[58.373711,-9.5],"ANAVA":[39.899561,-25.408939],"APSOV":[55.823056,-10],"APTEK":[63.212114,1.015303],"ARMED":[42.5,-14],"ARNAR":[64.680833,-18.550278],"ASDEB":[42.515917,-8.491889],"ASKJA":[64.870833,-17.262222],"ASKUR":[65.195556,-18.691667],"ASMOD":[68.985908,-51.934269],"ASPEX":[38.319622,-28.157992],"ASRUN":[63.557494,-20.581761],"ASTAN":[65.417778,-39.995556],"ASVID":[64.630278,-48.378889],"ATSIX":[60,-10],"ATSUR":[50,-14],"AUDUN":[62.246111,-48.899444],"AXIXE":[76.530006,-68.761514],"BABAN":[54,-12],"BADEG":[66.316667,-47.5],"BAGTO":[64.806944,-47],"BAGUD":[77.275778,-68.667769],"BAKUG":[66.068483,-51.143122],"BALIX":[59,-10],"BAMBU":[60.319861,2.458958],"BANAL":[42,-15],"BANIX":[38.405547,-28.113025],"BARKU":[60.605,-9.41],"BARUD":[62.5,0],"BASLU":[63.188744,-21.272142],"BAULA":[64.939444,-14.693056],"BAVAS":[39,-23.678353],"BAXER":[62.696667,-26.014722],"BEDAL":[42.104667,-7.753944],"BEDRA":[49,-15],"BEGAS":[45,-9],"BEGID":[56.5,-14],"BEKUN":[37.948269,-23.234622],"BERAX":[43.252053,-8.176667],"BERSO":[74.466667,-20.6],"BERUX":[45,-11],"BESGA":[60.789722,-7.912778],"BETRO":[61.781944,2.831944],"BEXET":[54,-14],"BIGPI":[31.951944,-17.248889],"BILLY":[60.019578,-8.568744],"BILTO":[56.5,-15],"BIMBO":[31.421453,-16.032878],"BIMGO":[49.5,-14],"BIRMI":[42.294444,-8.198944],"BIRNA":[63.333056,-24.316067],"BLAMI":[64.48,-19.819722],"BOBLO":[61.867778,1.724722],"BRAVO":[73.25,-61.416667],"BREKI":[62.538333,-19.546667],"BRUSI":[65.078889,-15.731111],"BUNAV":[46.5,-8.75],"BUREM":[61.903889,-6.603889],"BURIX":[63.176917,1.818644],"CELLO":[62.238333,-20.468333],"CHARL":[38.365833,-24.701944],"CONNY":[61.9,-5.583333],"CURAN":[79.916667,-60.583333],"DARIM":[47.065278,-55.445833],"DEGUN":[33.418708,-15.658297],"DELES":[63.494636,-24.576475],"DELTA":[37.770278,-24.078611],"DENOK":[64.129108,-15.140642],"DETOX":[41,-15],"DEVBI":[60.715,-8.769444],"DEVBO":[68.583333,-52],"DEVNU":[65.004722,-35.879722],"DEVOL":[53.890278,-10.434167],"DINIM":[51,-15],"DISGU":[69.243889,-53.528056],"DIXIS":[45,-10],"DOBOB":[67.873222,-50.989569],"DOGAL":[54,-15],"DOKAS":[37.232389,-23.364406],"DOLER":[39.267933,-26.380072],"DOLIP":[52,-12],"DONIB":[55.719167,-7.695556],"DOPOD":[62.897222,-26.360556],"DOSIT":[68.392778,-52.122222],"DOSUN":[60.1175,-6.394167],"DOTEB":[66.074817,-51.276997],"DRESR":[76.51,-69.666667],"EBEXI":[65.716667,-41],"EBIDI":[62.8925,1.636944],"EDERI":[66.168489,-51.998639],"EGILL":[65.034167,-14.679444],"EKROL":[42,-15.583333],"ELBEN":[38.702683,-28.269978],"ELBIM":[33.108056,-17.1175],"ELDIS":[63.676028,-24.760583],"ELKIL":[65.573833,-14.336219],"ELKOG":[60.446564,-9.5],"ELRAD":[33.5075,-16.331111],"ELREX":[63.116667,-26.653333],"ELSOX":[51,-14],"ELTEP":[42.616528,-7.783694],"ELVUR":[65.103611,-14.8375],"EMPER":[49,-9],"EPAKA":[33.731111,-16.125],"EPENI":[63.383333,-26.911667],"EPUNA":[50.5,-14],"ERAKA":[58,-10],"ERANO":[38.179472,-28.316644],"ERPES":[40,-15],"ERSER":[61.5,0],"ETARI":[55.5,-15],"ETIKI":[48,-8.75],"ETILO":[57.5,-10],"ETROX":[36.402561,-24.024581],"ETSOM":[57.891944,-9.5],"EVABU":[62.317367,-44],"EVBAK":[49,-10],"EVBEV":[57.786111,-7.678056],"EVDIR":[61.995833,-49.647778],"EVNAL":[57.408517,-9.5],"EVONI":[32.196389,-16.178889],"EXODO":[33.757778,-16.319444],"FAKSO":[61.138522,2.1443],"FELLI":[65.354167,-15.173889],"FIR01":[61,-12.566667],"FIR02":[61,-16.5],"FOXT1":[36.802222,-23.741389],"FOXT2":[36.448611,-23.893889],"FRINI":[78.2,-67.7],"FUSUL":[32.601453,-16.661906],"GAKTU":[63.96,-20.724722],"GALPA":[34.398153,-14.730375],"GANGI":[66.894444,-49.680833],"GATBO":[65.194444,-47],"GEGRU":[61.017494,1.269828],"GEKLO":[65.6209,-14.015028],"GELPI":[26.595389,-14.854361],"GEMVA":[62.378056,1.728889],"GIGOM":[66.558333,-54.291667],"GIKAR":[34.166039,-14.030058],"GILPO":[66.47145,-51.055267],"GINAG":[67.806217,-51.831875],"GINGA":[56.925,-9.5],"GINSU":[36.292414,-27.647708],"GIPER":[51,-12],"GIRIN":[77.412675,-68.517144],"GIRIX":[37.209533,-25.219839],"GIRNU":[60.473611,-0.619444],"GIRPA":[75.1,-42.316667],"GIRUG":[64.108306,-24.873894],"GISGA":[72.566667,-38.466667],"GISTI":[53,-14],"GISTU":[64.122222,-27.169444],"GOBEG":[29,-25],"GODUT":[68.343056,-52.416389],"GOKIK":[64.501389,-27.056944],"GOLF ":[35.851944,-24.887222],"GOMOS":[37.013439,-30.057214],"GOMUP":[57,-10],"GONAN":[45,-14],"GORBI":[78.066667,-65.666667],"GOSGA":[32.082119,-16.631194],"GUNPA":[61,0],"GUNSO":[49.052797,-11.768225],"GUNTI":[39,-15],"HIDRA":[44.5,-13],"HOTEL":[36.013056,-25.956389],"IBROD":[56.5,-10],"IBVAS":[61.206911,1.830636],"IDIGO":[32.840072,-16.340442],"IDREL":[34.341667,-16.291667],"INBAN":[64.833333,-50],"INBOX":[38.368311,-33.363619],"INBUL":[38.495408,-30],"INDES":[65.166667,-26.368333],"INDIA":[37.1175,-27.882222],"INGAN":[64.562206,-24.487425],"INGAS":[69.221389,-51.525556],"INGOG":[64.093019,-15.311758],"INS03":[75.333333,-20],"INS04":[78.833333,-40],"INSAD":[28,-25],"IPRUK":[64.100833,2.713611],"IPTON":[62,0],"IRKID":[33.924883,-18.069231],"IRSAN":[33.16675,-16.504489],"ISVIG":[63,0],"IXIKU":[27,-25],"JULIT":[38.117778,-29.725],"KAYAK":[64.225,-39.995556],"KEILA":[63.984444,-22.158889],"KEKOS":[32.449183,-16.227139],"KELDO":[65.57,-51.759167],"KELUX":[71,-53.336389],"KEMOS":[66.958889,-52.220556],"KESEG":[60.016111,-6.015556],"KESIX":[56.95,-14],"KETID":[30,-20],"KILO ":[38.465833,-30.391389],"KITAP":[62.411667,-47.995833],"KOGAD":[49.5,-15],"KOGAG":[64.631111,-47],"KOKER":[39.90585,-33.733972],"KOKIB":[54.5,-14],"KOLIT":[40.548583,-33.389117],"KOMUT":[38,-15],"KOPAS":[44,-13],"KOPIP":[46.93085,-7.503825],"KORAV":[43.653103,-7.865586],"KOXIN":[65.509722,-50.956389],"KUGAM":[66.473056,-51.130833],"KUGUR":[55.5,-10],"KUKAK":[68.199731,-53.067622],"KUKEK":[63.868333,2.485556],"KULOX":[77.184922,-68.967897],"KUNUK":[68.506667,-50.872778],"KUNUL":[60.55,-42.633333],"KUVOX":[58.083056,-7.606667],"KUXOV":[26,-25],"LADOX":[38.94715,-28.021192],"LANAN":[74.833333,-68.566667],"LAPEX":[47,-8],"LAPLU":[65.369278,-14.575611],"LAPTU":[25,-25],"LARUX":[62.621667,-10],"LASNO":[48.598228,-9],"LEKVA":[51.5,-14],"LENSI":[39,-20],"LEPRU":[32,-14.801111],"LIDRO":[33.6674,-15.949597],"LILGO":[67.436389,-51.431389],"LIMA ":[39.501389,-31.679444],"LIMRI":[52,-15],"LINRA":[51.579722,-10.032222],"LODLA":[51.936111,-10.528056],"LODNO":[65.033333,-40],"LONDU":[52.916667,-12.5],"LUCIE":[74.916667,-66.8],"LUKAL":[41.253,-32.355892],"LUKAN":[33.474444,-14.931389],"LUKIT":[40.196858,-30],"LULUB":[63.133333,1.730278],"LUNDI":[63.645278,-20.821389],"LUPOV":[42,-15.083333],"LUSEN":[60.5,-10],"LUTAK":[37,-15],"LUTER":[64.117961,-20.361033],"LUTOV":[55.239444,-10],"LUXOV":[65.8775,-53.149722],"MAARE":[76.907333,-68.239167],"MADAT":[32.161869,-17.085222],"MADIX":[65.268889,-52.822778],"MALOT":[53,-15],"MAMAV":[60.491328,2.824625],"MAMUP":[32.092778,-15.556389],"MANOX":[36.194342,-15.390219],"MANSE":[72.883333,-64.916667],"MASIK":[65.967778,-39.995278],"MATIK":[61,-8.066667],"MAVEX":[33.190511,-16.355722],"MEGAT":[43.498869,-7.596469],"METIL":[63.971944,-21.526111],"MIKE ":[39.603889,-31.642778],"MIKLA":[63.848333,-17.574167],"MIMKU":[56,-10],"MIPRU":[38.273611,-26.364842],"MISTE":[43.35535,-8.085203],"MODGO":[60.445278,-7.665278],"MOGLO":[55.5,-14],"MOLOX":[61.031919,2.624075],"MOXAL":[64.083333,-18],"MUDOS":[43.5,-13],"MURTA":[64.135833,-21.811111],"MYRAR":[64.702222,-22.148056],"N3915":[39.5,-15],"N4015":[40.5,-15],"N4115":[41.5,-15],"N4213":[42.5,-13],"NAKOM":[77.634136,-69.995108],"NALAK":[65.714167,-52.564722],"NALAN":[61,-6],"NANSI":[63.135278,-46.995833],"NARBO":[42.139814,-8.228289],"NASBA":[49,-13],"NASBU":[63.946672,-20.348181],"NASET":[60.530833,1.955],"NASOP":[65.566667,-34.583333],"NAVIX":[35.520469,-16.234342],"NAVPO":[37.621133,-25.316372],"NEBAV":[61.066286,1.98825],"NEBIN":[53.5,-15],"NEGOV":[32.736389,-15.869167],"NERTU":[49,-14],"NETKI":[55,-14],"NEXEP":[43.198889,-9.499806],"NIDUL":[32.365228,-17.352922],"NIKAV":[33.348525,-16.873494],"NILAV":[45,-13.416667],"NINEX":[58.855556,-9.5],"NIPRI":[33,-14.123333],"NOLMU":[42.634278,-8.333917],"NONNI":[65.313611,-19.400278],"NONRO":[65.183333,-30],"NOTMA":[38.812569,-28.056147],"NOV  ":[39.908611,-28.548333],"NUTKA":[64.557222,-51.449167],"NYGAR":[68.232222,-52.311389],"OBESA":[36.657139,-14.245808],"OBUBA":[57.777778,-7.555278],"OBUDA":[39.113611,-31.032778],"ODANU":[49.916667,-12.5],"ODPEX":[59.409903,-9.5],"ODVOX":[35.031389,-14.448889],"OKRUB":[63,1.277742],"OLDEK":[38.315514,-28.439036],"OLGON":[53.5,-14],"OLNOS":[63.8675,-21.294167],"OMOBI":[37.890683,-24.812661],"OMOKO":[48.838972,-12],"ORTAV":[59.5,-10],"ORTIS":[31.406944,-16.556917],"OSBEX":[60.60765,2.774317],"OSBON":[61,-5],"OSBOX":[56.806389,-12.801667],"OSGIT":[77.307889,-69.290839],"OSKUM":[63.712222,-20.442778],"OSLEV":[30,-22],"OSTED":[62.783333,-42],"OXYPT":[63.633333,-46],"PASAS":[45,-13],"PECKY":[34.530297,-15.337892],"PELUS":[33.445156,-17.071203],"PEMOS":[61,-4],"PENUX":[65.749444,-17.759444],"PERUR":[65.4409,-18.959397],"PETEK":[42.678919,-12],"PETUD":[37.498556,-25.805528],"PETUX":[62.733333,-19.116667],"PEVAN":[55.783333,-11.333333],"PEVAP":[35.246944,-14.818333],"PEVAR":[66.699167,-46.939722],"PEXIL":[65.403889,-18.051111],"PIBIL":[30,-23],"PIGET":[55.833333,-12.5],"PIKIL":[56,-15],"PITAX":[45,-12],"PIVON":[42.503944,-8.552472],"PIXUM":[63.358206,-20.872761],"POBAR":[32.964072,-16.164622],"PODEL":[37.617061,-25.699597],"POKAX":[63.122592,2.892978],"PONTE":[43.298169,-8.121958],"PORSU":[62.636667,-42.995833],"RAKIS":[63.584722,-27.044722],"RAKUN":[33.556947,-15.781264],"RALOV":[63.882997,-24.867733],"RASTO":[61.266256,2.78635],"RATKA":[49.5,-8],"RATSU":[61,-10],"RAVBA":[66.316667,-46.283333],"REDSO":[37.647953,-25.795369],"REGHI":[48,-8],"REGLA":[38.855147,-26.13875],"REKVA":[64.441667,-20.821111],"RESNO":[55,-15],"RETEN":[43,-13],"RETUR":[65.538611,-17.624722],"REVNU":[54.466667,-10.116667],"RILED":[52.5,-14],"RIMIV":[34.171111,-15.594167],"RIMTU":[43.322389,-8.366889],"RIMUM":[63.075833,-21.689444],"RIPEL":[42.283058,-10.816194],"RIPOD":[30,-24],"RIVAK":[46,-8],"RIVEM":[43.744333,-8.647083],"RIXUN":[61,-3],"RODAS":[37.772372,-25.992844],"RODEL":[50.5,-15],"RODIL":[38.079014,-27.606739],"ROGLO":[63,0.083],"ROLAR":[34.211453,-15.205744],"ROSIE":[65.539167,-51.466111],"ROSTI":[63.406389,-14.112222],"ROTIN":[63.916667,-27.160278],"RULET":[34.251594,-14.915544],"RUMUX":[62.374167,-20],"RUXIN":[56.281944,-12],"SABAG":[65.266667,-35.283333],"SAVIS":[75.35,-63.666667],"SBMCI":[65.937889,-23.978072],"SEPAL":[47,-8.75],"SIMON":[68.494167,-51.221667],"SIPRU":[39.179922,-27.889539],"SISLO":[64.3,-20],"SIVIR":[46,-8.75],"SKALM":[65.628611,-22.36],"SKOTT":[64.785833,-22.870833],"SOBVI":[65.181944,-43.828889],"SOLGI":[38.6249,-28.032672],"SOMAX":[50,-15],"SOMUL":[38.222622,-27.316942],"SOPEN":[64.7,-26.925],"SORIR":[64.403514,-24.692089],"SORUD":[61.087361,2.022222],"SOSAR":[61,-2],"SOSIT":[64.816667,-30],"SOSOV":[44.983,-7.885028],"SOSUK":[61.450664,2.143328],"SOVED":[56,-14],"STEFA":[75.1,-65.083333],"SUBUD":[64.566667,-52.25],"SUDUL":[68.166667,-31.516667],"SUKAK":[66.9425,-50.489167],"SUKED":[64.994444,-26.619444],"SUMEL":[63.7825,-21.789444],"SUMUD":[72.616667,-38.5],"SUNOT":[57,-15],"SUPIK":[37.920725,-26.059525],"SUVAN":[51.416667,-12.5],"SVINA":[64.409722,-15.440833],"TABOM":[32.225606,-16.457561],"TAKAS":[49,-8],"TAMEL":[48.728611,-10.497222],"TELMU":[35.637672,-14.530594],"TERTU":[64.434167,-21.728611],"TIBLI":[65.2325,-14.781222],"TIBRA":[64.292778,-20.928333],"TIDVI":[38.124097,-26.151403],"TIMTO":[38.387853,-27.321422],"TIVLU":[46.5,-8],"TOBEB":[60.312206,2.705242],"TOBED":[33.237642,-16.473361],"TOBOR":[52.5,-15],"TOLAN":[65.603056,-49.348611],"TOMAS":[73.733333,-58.583333],"TULTA":[48.576944,-8],"TURON":[42.067925,-8.563417],"TURSO":[64.7,-20],"TUSEX":[37.823672,-26.092989],"TUXIV":[33.720556,-17.640833],"TUXOS":[55.973333,-7.526389],"ULBER":[46.975,-56.018056],"ULKIM":[65.487756,-13.901869],"UMLER":[47.5,-8.75],"UMOXA":[47.5,-8],"UNLID":[51.209167,-10.724722],"UNVIG":[66.5275,-51.533889],"URATU":[36.696111,-25.153889],"VALDI":[61.214428,0],"VAMLA":[60,-4],"VAXAN":[65.416667,-34.9],"VEBIL":[61.214722,2.273611],"VELAS":[38.658858,-28.358506],"VENER":[54.5,-15],"VESIB":[60.782192,2.896167],"VETEL":[33.340833,-16.361389],"VEXIN":[75.330556,-62],"XAMUS":[62.625,1.721111],"XAVAL":[32.724167,-16.498611],"XEBIK":[42.753722,-8.06475],"XEGEN":[32.316389,-16.016111],"XERES":[42.023894,-10.067975],"XERON":[32.381314,-16.943503],"XETBO":[52,-14],"XINGA":[33.049353,-17.142514],"XOGRA":[38.403461,-29.021497],"XORVU":[39.630492,-30.652083],"XRAY ":[64.64,-26.971667],"XUVAP":[37.589214,-25.216931],"2650N":[26,-50],"2655N":[26,-55],"2745N":[27,-45],"2747N":[27,-47],"2748N":[27,-48],"2749N":[27,-49],"2750N":[27,-50],"2761N":[27,-61],"2955N":[29,-55],"3065N":[30,-65],"2540N":[25,-40],"2545N":[25,-45],"2550N":[25,-50],"2553N":[25,-53],"2555N":[25,-55],"2565N":[25,-65],"2570N":[25,-70],"2630N":[26,-30],"2640N":[26,-40],"2645N":[26,-45],"2660N":[26,-60],"2665N":[26,-65],"2670N":[26,-70],"2740N":[27,-40],"2741N":[27,-41],"2742N":[27,-42],"2744N":[27,-44],"2746N":[27,-46],"2751N":[27,-51],"2752N":[27,-52],"2753N":[27,-53],"2754N":[27,-54],"2755N":[27,-55],"2756N":[27,-56],"2770N":[27,-70],"2840N":[28,-40],"2845N":[28,-45],"2850N":[28,-50],"2855N":[28,-55],"2865N":[28,-65],"2870N":[28,-70],"2940N":[29,-40],"2945N":[29,-45],"2950N":[29,-50],"2965N":[29,-65],"2970N":[29,-70],"3040N":[30,-40],"3045N":[30,-45],"3050N":[30,-50],"3053N":[30,-53],"3054N":[30,-54],"3055N":[30,-55],"3060N":[30,-60],"3070N":[30,-70],"3140N":[31,-40],"3145N":[31,-45],"3150N":[31,-50],"3155N":[31,-55],"3160N":[31,-60],"3165N":[31,-65],"3170N":[31,-70],"3240N":[32,-40],"3245N":[32,-45],"3250N":[32,-50],"3255N":[32,-55],"3260N":[32,-60],"3265N":[32,-65],"3270N":[32,-70],"3340N":[33,-40],"3345N":[33,-45],"3350N":[33,-50],"3355N":[33,-55],"3360N":[33,-60],"3365N":[33,-65],"3370N":[33,-70],"3440N":[34,-40],"3445N":[34,-45],"3450N":[34,-50],"3455N":[34,-55],"3460N":[34,-60],"3465N":[34,-65],"3470N":[34,-70],"3540N":[35,-40],"3545N":[35,-45],"3550N":[35,-50],"3555N":[35,-55],"3560N":[35,-60],"3563N":[35,-63],"3565N":[35,-65],"3570N":[35,-70],"3640N":[36,-40],"3645N":[36,-45],"3650N":[36,-50],"3655N":[36,-55],"3660N":[36,-60],"3665N":[36,-65],"3670N":[36,-70],"3740N":[37,-40],"3745N":[37,-45],"3750N":[37,-50],"3755N":[37,-55],"3760N":[37,-60],"3765N":[37,-65],"3770N":[37,-70],"3840N":[38,-40],"3845N":[38,-45],"3850N":[38,-50],"3855N":[38,-55],"3856N":[38,-56],"3860N":[38,-60],"3865N":[38,-65],"3940N":[39,-40],"3945N":[39,-45],"3947N":[39,-47],"3950N":[39,-50],"3955N":[39,-55],"3960N":[39,-60],"3A45N":[30.666667,-45],"3A55N":[34.566667,-55],"3A65N":[37.25,-65],"3B45N":[36.633333,-45],"3B55N":[39.116667,-55],"3C45N":[33.666667,-45],"3C55N":[38.133333,-55],"4040N":[40,-40],"4045N":[40,-45],"4050N":[40,-50],"4055N":[40,-55],"4060N":[40,-60],"4065N":[40,-65],"4140N":[41,-40],"4145N":[41,-45],"4150N":[41,-50],"4155N":[41,-55],"4160N":[41,-60],"4165N":[41,-65],"4167N":[41,-67],"4240N":[42,-40],"4245N":[42,-45],"4246N":[42,-46],"4250N":[42,-50],"4255N":[42,-55],"4256N":[42,-56],"4260N":[42,-60],"4265N":[42,-65],"4340N":[43,-40],"4345N":[43,-45],"4350N":[43,-50],"4355N":[43,-55],"4440N":[44,-40],"4445N":[44,-45],"4450N":[44,-50],"4455N":[44,-55],"4540N":[45,-40],"4545N":[45,-45],"4A45N":[40.333333,-45],"4A65N":[40.833333,-65],"4B45N":[40,-45.5],"AJGUB":[45.325378,-67.692794],"ALLEX":[44.416667,-67],"AMENO":[29,-60],"AMZIE":[43.106667,-67.286667],"ANTIG":[31.484683,-68.060503],"ANVER":[35.252028,-65.687792],"AVAST":[41.922306,-64.879306],"AWSOM":[33.027081,-67.341194],"AYTTE":[28,-60],"BALOO":[34.405167,-62.137167],"BALTN":[30.690328,-67.605453],"BAXIE":[43.360842,-67.798569],"BBPVK":[45.696092,-67.803122],"BEXUM":[33.302314,-69.812475],"BOBBO":[32.36975,-67.204211],"BOBTU":[44.117222,-52.822222],"BOVIC":[34.873483,-66.667581],"BRADD":[43.15,-67],"BRKZZ":[27.320519,-64.962347],"CANME":[45.487858,-67.621333],"CARAC":[43,-60],"CATZZ":[31.082547,-66.941722],"CAXIX":[44.936178,-67.062272],"CEYAN":[44.816517,-67.516908],"CLXTN":[35.722956,-68.556072],"CUZWA":[45.296803,-67.466172],"DARUX":[36.159878,-69.455086],"DASER":[34.138508,-67.577622],"DAVES":[42.945103,-67.507747],"DOVEY":[41.116667,-67],"DRYED":[38.632278,-66.667461],"DUNIG":[28.823367,-68.740792],"DUNOM":[44.901931,-67],"DUPAN":[25.512506,-64.581919],"DUPOX":[27.940969,-68.541106],"EBONY":[44.902411,-67.156569],"EMAKO":[31.396414,-68.238683],"ENAPI":[33.206025,-68.105992],"FEDUT":[44.795728,-67.379531],"FIVZE":[25,-60],"FLAMO":[33.376781,-66.309719],"FODAG":[44.805544,-67.448386],"GECAL":[29.424492,-65.421364],"GUICE":[32.740356,-66.161364],"HERIN":[42.002714,-67.790614],"JAROM":[44.166667,-54.883333],"JEBBY":[43.072222,-57.868056],"JIMAC":[32.357511,-68.23155],"JOBOC":[40.116667,-67],"KANNI":[42.633333,-67],"KAYYT":[38.877175,-67.572856],"KINER":[36.574231,-68.287447],"KOZIK":[26.807431,-63.750453],"KURTS":[30.166356,-64.495211],"LAZEY":[33.589,-61.485],"LITTL":[32.373547,-66.076842],"LOMPI":[44,-57],"LUCTI":[25,-69.093722],"LUNKR":[35.336814,-66.383364],"MEGGG":[28.361133,-67.528522],"MUNEY":[38.5,-64.964361],"MURLO":[44.089722,-55.927778],"N3770":[37.5,-70],"N3865":[38.5,-65],"NOSID":[34.109939,-68.914489],"NOVOK":[42.381597,-61.201561],"NUMBR":[32.670556,-61.192222],"OVAPI":[37.454594,-66.809519],"PIERC":[32.035164,-65.999486],"PIREX":[29.374361,-64.321189],"QRTET":[31.75225,-67.077364],"RABAL":[26.7245,-69.453894],"RAFIN":[44.883333,-51.804722],"RNSYN":[46.042725,-67.781014],"ROOFE":[31.674711,-65.917725],"SAILE":[41.185769,-67.895711],"SBCDC":[46.034394,-67.781],"SBGSK":[46.010236,-67.781086],"SEAVR":[29.698858,-63.073617],"SEBIS":[27.758214,-69.675139],"SELIM":[38.5,-62.668933],"SHEIL":[29.909839,-66.708806],"SICKL":[31.05915,-65.779583],"SIFEN":[27,-60],"SLATN":[39.116667,-67],"SOORY":[38.5,-60.267583],"TASNI":[30.900311,-69.224944],"TILED":[37.266094,-68.973267],"TONEY":[30.223119,-64.423433],"TOPPS":[45.340181,-67.738642],"TUSKY":[43.565,-67],"VESRA":[25.474794,-68],"VINSO":[27.083122,-67.242017],"VITOL":[41.783333,-67],"WHALE":[42.197778,-67],"WINGZ":[31.641833,-61.289],"WUBAT":[44.756642,-67.462986],"WUMUB":[44.724039,-67.472714],"YEPSY":[31.864622,-62.287394],"ZONEM":[44.642525,-67.496956],"ZUDEK":[44.733819,-67.469797]}')},function(t,e,n){"use strict";n.r(e),n.d(e,"version",(function(){return lt})),n.d(e,"GeoPoint",(function(){return E})),n.d(e,"nm_to_rad",(function(){return u})),n.d(e,"rad_to_nm",(function(){return o})),n.d(e,"AVENZAICONS",(function(){return M})),n.d(e,"GOOGLEICONS",(function(){return U})),n.d(e,"NAT_POSITION_ENTRY",(function(){return T})),n.d(e,"NAT_POSITION_EXIT",(function(){return m})),n.d(e,"PINS",(function(){return L})),n.d(e,"PIN_BLUE",(function(){return O})),n.d(e,"PIN_BROWN",(function(){return h})),n.d(e,"PIN_GREEN",(function(){return F})),n.d(e,"PIN_NONE",(function(){return d})),n.d(e,"PIN_ORANGE",(function(){return I})),n.d(e,"PIN_PINK",(function(){return f})),n.d(e,"PIN_PURPLE",(function(){return R})),n.d(e,"PIN_RED",(function(){return S})),n.d(e,"PIN_YELLOW",(function(){return p})),n.d(e,"Route",(function(){return g})),n.d(e,"Track",(function(){return P})),n.d(e,"avenzaIconTemplate",(function(){return w})),n.d(e,"avenzaStyleTemplate",(function(){return b})),n.d(e,"avenzaTemplate",(function(){return y})),n.d(e,"iconTemplate",(function(){return X})),n.d(e,"styleTemplate",(function(){return V})),n.d(e,"template",(function(){return G})),n.d(e,"KMLGenerator",(function(){return _})),n.d(e,"Ofp",(function(){return rt})),n.d(e,"GEO_HASH_GRID_SIZE",(function(){return ot})),n.d(e,"GeoGridIndex",(function(){return ut})),n.d(e,"ogimetRoute",(function(){return st})),n.d(e,"ogimetData",(function(){return at}));class r{constructor(t,e){this.latitude=t,this.longitude=e}get[Symbol.toStringTag](){return"LatLng"}get asDM(){const t=function(t,e="NS"){let n=Math.abs(t),r=Math.floor(n),N=60*(n-r),i=Math.floor(N),o=Math.round(10*(N-i));o>=10&&(o=0,i+=1),i>=60&&(i=0,r+=1);let u="",s=2;return"NS"===e?u=t>=0?e[0]:e[1]:(u=t>0?e[0]:e[1],s=3),[u,r.toFixed(0).padStart(s,"0"),i.toFixed(0).padStart(2,"0"),"."+o.toFixed(0)].join("")};return t(this.latitude)+t(this.longitude,"EW")}get asLatPhi(){const[t,e]=[this.latitude,this.longitude].map(t=>t*Math.PI/180);return new N(t,e)}}class N{constructor(t,e){this.rlat=t,this.phi=e}get[Symbol.toStringTag](){return"LatPhi"}get asLatLng(){const[t,e]=[this.rlat,this.phi].map(t=>180*t/Math.PI);return new r(t,e)}}const i=6371e3,o=t=>t*i/1852,u=t=>1852*t/i,s=t=>1e3*t/i;function a(t){const e=t[0];if("NSEW".indexOf(e)<0)throw new Error("invalid letter coordinates: "+t);const n="N"===e||"S"===e?3:4;return("N"===e||"E"===e?1:-1)*(parseInt(t.slice(1,n),10)+parseFloat(t.slice(n))/60)}function l(t){return t&&t.length?new r(...t):new r([0,0])}function c(t){let e=0,n=0;return Array.isArray(t)?[e,n]=t:(e=t.slice(0,7),n=t.slice(7)),new r(a(e),a(n))}function A(t){const e=function(t,e,n){switch(t){case"N":return new r(e,-n);case"E":return new r(e,n);case"S":return new r(-e,n);case"W":return new r(-e,-n);default:throw new Error("invalid letter")}};let n=0,N=0;return"NESW".indexOf(t[0])>=0?(n=parseInt(t.slice(1,3),10)+.5,N=parseInt(t.slice(3,5),10),e(t[0],n,N)):"NESW".indexOf(t[1])>=0?(n=parseInt(t[0]+t[2],10)+.5,N=parseInt("1"+t.slice(3,5),10),e(t[1],n,N)):("NS".indexOf(t[4])>=0?(n=a(t[4]+t.slice(0,4)+".0"),N=a((t.slice(-1)+t.slice(5,-1)+"00").slice(0,5)+".0")):(n=a(t[2]+t.slice(0,2)+"00.0"),N=a(t.slice(-1)+t.slice(3,-1)+"00.0")),new r(n,N))}class E{constructor(t,{name:e="",description:n="",normalizer:N=l}={}){t instanceof E?(this.latlng=t.latlng,e=e||t.name||"",n=n||t.description||""):t instanceof r?this.latlng=t:t&&"object"==typeof t&&Reflect.has(t,"longitude")&&Reflect.has(t,"latitude")?(this.latlng=new r(parseFloat(t.latitude),parseFloat(t.longitude)),e=e||t.name||"",n=n||t.description||""):this.latlng=N?N(t):t,this.name=e.trim(),this.description=n,this.latphi_cache=null,this.dm_cache=null}get[Symbol.toStringTag](){return"GeoPoint"}get latitude(){return this.latlng.latitude}get longitude(){return this.latlng.longitude}get latphi(){return null===this.latphi_cache&&(this.latphi_cache=this.latlng.asLatPhi),this.latphi_cache}get dm(){return null===this.dm_cache&&(this.dm_cache=this.latlng.asDM),this.dm_cache}static distance(t,e,n=null){return t.distanceTo(e,n)}static course(t,e){return t.course_to(e)}static xtd(t,e,n=null){return t.xtd_to(e,n)}static getCenter(t,e={}){let n=t.length,r=0,i=0,o=0,u=0,s=0;for(let e of t){i=e.latphi.rlat,r=e.latphi.phi;let t=Math.cos(i);o+=t*Math.cos(r),u+=t*Math.sin(r),s+=Math.sin(i)}return o/=n,u/=n,s/=n,i=Math.atan2(s,Math.sqrt(Math.pow(o,2)+Math.pow(u,2))),r=Math.atan2(u,o),new E(new N(i,r).asLatLng,e||{})}distanceTo(t,e=null){const n=this.latphi.rlat,r=this.latphi.phi,N=t.latphi.rlat,i=t.latphi.phi,o=Math.acos(Math.sin(n)*Math.sin(N)+Math.cos(n)*Math.cos(N)*Math.cos(i-r));return null!==e?e(o):o}course_to(t){const e=this.latphi.rlat,n=this.latphi.phi,r=t.latphi.rlat,N=t.latphi.phi;return i=Math.atan2(Math.sin(n-N)*Math.cos(r),Math.cos(e)*Math.sin(r)-Math.sin(e)*Math.cos(r)*Math.cos(n-N)),o=2*Math.PI,Number((i-Math.floor(i/o)*o).toPrecision(8));var i,o}xtd_to(t,e=null){const n=t[0].course_to(t[1]),r=t[0].course_to(this),N=t[0].distanceTo(this),i=Math.asin(Math.sin(N)*Math.sin(r-n));return null!==e?e(i):i}atFraction(t,e=.5,n=null){const r=null===n?this.distanceTo(t):n,i=this.latphi.rlat,o=this.latphi.phi,u=t.latphi.rlat,s=t.latphi.phi,a=Math.sin((1-e)*r)/Math.sin(r),l=Math.sin(e*r)/Math.sin(r),c=a*Math.cos(i)*Math.cos(o)+l*Math.cos(u)*Math.cos(s),A=a*Math.cos(i)*Math.sin(o)+l*Math.cos(u)*Math.sin(s),d=a*Math.sin(i)+l*Math.sin(u),O=Math.atan2(d,Math.sqrt(Math.pow(c,2)+Math.pow(A,2))),p=Math.atan2(A,c);return new E(new N(O,p).asLatLng)}equals(t){return this.latitude.toFixed(6)===t.latitude.toFixed(6)&&this.longitude.toFixed(6)===t.longitude.toFixed(6)}toJSON(){return{__geopoint__:!0,latitude:this.latitude.toFixed(6),longitude:this.longitude.toFixed(6),name:this.name,description:this.description}}}const d=0,O=1,p=2,h=3,I=4,f=5,S=6,F=7,R=8,T=0,m=1,L=["#placemark-none","#placemark-blue","#placemark-yellow","#placemark-brown","#placemark-orange","#placemark-pink","#placemark-red","#placemark-green","#placemark-purple"],U=["FFFFFF","6699FF","FFFF00","CC9966","FF9922","DD5599","FF0000","22DD44","BB11EE"].map(t=>"http://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=|"+t),M=["null","blue","yellow","red","orange","red","red","green","purple"].map(t=>`http://download.avenza.com/images/pdfmaps_icons/pin-${t}-inground.png`);class g{constructor(t,{name:e="",description:n=""}={}){this.points=t||[],this.name=e,this.description=n}get[Symbol.toStringTag](){return"Route"}get[Symbol.iterator](){return this.points[Symbol.iterator]}equals(t){if(this.points.length!==t.points.length)return!1;for(let[e,n]of((t,e)=>t.map((t,n)=>[t,e[n]]))(this.points,t.points))if(!e.equals(n))return!1;return!0}get segments(){let t=[];return this.points.length>0&&this.points.reduce((e,n)=>(t.push([e,n]),n)),t}distance(t=o){const e=this.segments.map(([t,e])=>t.distanceTo(e)).reduce((t,e)=>t+e,0);return null===t?e:t(e)}split(t,e={}){let{converter:n=u,preserve:r=!1}=e||{},N=[],i=0,o=!0,s=n?n(t):t,a=null,l=null;for([a,l]of this.segments){o&&(o=!1,N.push(a));let t=a.distanceTo(l),e=i;for(;e<=t-s;)e+=s,N.push(a.atFraction(l,e/t,t));i=parseFloat((e-t).toFixed(10)),r&&i&&(N.push(l),i=0)}return i&&N.push(l),new g(N,e)}}class P extends g{constructor(t,e){let{isMine:n=!1,isComplete:r=!0}=e||{};super(t,e),this.isMine=n,this.isComplete=r}get[Symbol.toStringTag](){return"Track"}static label(t){return"NAT"+t}}const D=({point:t,style:e})=>`\n     <Placemark>\n      <name><![CDATA[${t.name||t.dm}]]></name>\n      <styleUrl>${e}</styleUrl>\n      <description><![CDATA[${t.description||""}]]></description>\n      <Point>\n        <coordinates>${t.longitude.toFixed(6)},${t.latitude.toFixed(6)}</coordinates>\n      </Point>\n    </Placemark>\n`,B=({coordinates:t,name:e,style:n,description:r})=>`\n<Placemark>\n  <name><![CDATA[${e}]]></name>\n  <styleUrl>${n}</styleUrl>\n  <description><![CDATA[${r}]]></description>\n  <LineString>\n    <tessellate>1</tessellate>\n    <coordinates>${t}</coordinates>\n  </LineString>\n</Placemark>\n`,K=({coordinates:t,name:e,style:n})=>`\n<Placemark>\n  <name><![CDATA[${e}]]></name>\n  <styleUrl>${n}</styleUrl>\n  <LineString>\n    <coordinates>${t}</coordinates>\n  </LineString>\n</Placemark>\n`,x=({name:t,content:e,open:n=1})=>`\n<Folder>\n    <name>${t}</name>\n    <open>${n}</open>\n    ${e}\n</Folder>\n`,G=({name:t,styles:e,folders:n})=>`<?xml version='1.0' encoding='UTF-8'?>\n<kml xmlns='http://www.opengis.net/kml/2.2'>\n  <Document>\n    <name><![CDATA[${t}]]></name>\n        ${e}\n        ${n}\n  </Document>\n</kml>\n`,y=({name:t,styles:e,folders:n})=>`<?xml version='1.0' encoding='UTF-8'?>\n<kml xmlns='http://www.opengis.net/kml/2.2'>\n  <Document>\n    <name><![CDATA[${t}]]></name>\n        ${e}\n        <Folder><name><![CDATA[${t}]]></name>\n        ${n}\n        </Folder>\n  </Document>\n</kml>\n`,V=({id:t,color:e,width:n=6})=>`\n    <Style id="${t}">\n        <LineStyle>\n            <width>${n}</width>\n            <color>${e}</color>\n        </LineStyle>\n    </Style>\n`,b=({id:t,color:e,width:n=3})=>V({id:t,color:e,width:n}),X=({id:t,href:e,x:n="0.5",y:r="0.0"})=>`\n    <Style id="${t}">\n        <IconStyle>\n            <Icon>\n                <href><![CDATA[${e}]]></href>\n            </Icon>\n            <hotSpot x="${n}"  y="${r}" xunits="fraction" yunits="fraction"/>\n        </IconStyle>\n    </Style>\n`,w=({id:t,href:e,x:n="0.5",y:r="0.5"})=>X({id:t,href:e,x:n,y:r}),v=Symbol("pin private property");class C{constructor(t,e={}){this.name=t,this.options=e,this.linestrings=[],this.placemarks=[],this.lineStyle={},this[v]=void 0===e.pinId?d:e.pinId,this.enabled=void 0===e.enabled||e.enabled}get pin(){return this[v]}empty(){this.linestrings=[],this.placemarks=[]}set pin(t){const e=L[this[v]];this[v]=t;const n=L[t];this.placemarks=this.placemarks.map(t=>(t.style===e&&(t.style=n),t))}}class _{constructor(t={}){this.folders=new Map,this.template=t.template||G,this.pointTemplate=t.pointTemplate||D,this.lineTemplate=t.lineTemplate||B,this.folderTemplate=t.folderTemplate||x,this.styleTemplate=t.styleTemplate||V,this.iconTemplate=t.iconTemplate||X,this.segmentTemplate=t.segmentTemplate||K,this.icons=t.icons||U,this.name=void 0}static escape(t){return t.replace("&","&amp;").replace("<","&lt;").replace("<","&lt;").replace(">","&gt;").replace('"',"&quot;")}computeOptions(t,e={},n=!1){if(e={...e},n&&void 0===e.style){let{style:n=this.folders.get(t).pin}=e;e.style=n}return void 0===e.style?e.style="#"+t:isNaN(e.style)||(e.style=L[e.style]),e}addFolder(t,e={}){let n=new C(t,e);this.folders.set(t,n);let r={id:t,color:t+"_color"};n.lineStyle={...r,...e}}addFolders(...t){for(let e of t)if("string"==typeof e||e instanceof String)this.addFolder(e);else{let t={...e};Reflect.deleteProperty(t,"name"),this.addFolder(e.name,t)}}addLine(t,e,n={}){let r={name:(n=this.computeOptions(t,n)).name||e.name,style:n.style,description:n.description||e.description};this.folders.get(t).linestrings.push(this.renderLine(e.points,{...r,...n}))}addPoints(t,e,n={}){const r=n.excluded||[];n=this.computeOptions(t,n,!0);for(let N of e.points)r.indexOf(N)>=0&&(n.style=d),this.addPoint(t,N,n)}addPoint(t,e,n={}){n=this.computeOptions(t,n,!0),this.folders.get(t).placemarks.push({point:e,...n})}addSegments(t,e,n={}){n=this.computeOptions(t,n);for(let[r,N]of e.segments){const i={name:`${e.name||t}: ${r.name||r.dm}->${N.name||N.dm}`};this.folders.get(t).linestrings.push(this.renderLine([r,N],{...i,...n},!0))}}render(t={}){let e="";const n=t.iconTemplate||this.iconTemplate,r=t.styleTemplate||this.styleTemplate,N=t.template||this.template,i=t.icons||this.icons;L.forEach((r,N)=>{0!==N&&(r={id:L[N].slice(1),href:i[N]},e+=n({...r,...t}))});for(let[,t]of this.folders)t.enabled&&(e+=r(t.lineStyle));return t.name||(t.name=this.name),N({...t,styles:e,folders:this.renderFolders()})}renderFolder(t,e=this.folderTemplate){if(("string"==typeof t||t instanceof String)&&(t=this.folders.get(t)),!t.enabled)return"";let n=[];return n=t.pin===d||void 0===t.pin?t.placemarks.filter(t=>t.style!==L[d]&&void 0!==t.style):t.placemarks.filter(t=>t.style!==L[d]),e({...{name:t.name,content:t.linestrings.concat(n.map(t=>this.pointTemplate(t,t.style))).join("\n")},...t.options})}renderFolders(){let t=[];for(let[,e]of this.folders)t.push(this.renderFolder(e));return t.join("\n")}renderLine(t,e={},n=!1){const r={...e,coordinates:t.map(t=>(t=>`${t.longitude.toFixed(6)},${t.latitude.toFixed(6)}`)(t)).join(" ")};return n?this.segmentTemplate(r):this.lineTemplate(r)}changeFolderColor(t,e,n={}){const r={id:t,color:e};this.folders.get(t).lineStyle={...r,...n}}changeFolderPin(t,e){this.folders.get(t).pin=e}changeFolderState(t,e){this.folders.get(t).enabled=e}reset(){for(let[,t]of this.folders)t.empty()}setName(t){this.name=t}}class $ extends Error{}Reflect.defineProperty(String.prototype,"extract",{value(t,e,n=!0,r=!1){let N=0,i=0;if(t){if(N=this.indexOf(t),-1===N)throw new $(t+" not found");r||(N+=t.length)}if(!e)return this.substring(N);if(i=this.indexOf(e,N),-1===i){if(n)return this.substring(N);throw new $(e+" not found")}return r&&(i+=e.length),this.substring(N,i)}});class Y extends RegExp{[Symbol.matchAll](t){let e=RegExp.prototype[Symbol.matchAll].call(this,t);if(!e)return console.error("WPT Coordinates regexp failed"),[];let n=[];return Array.from(e).forEach(t=>{let e=t[1].trim().replace(/^-+/u,"");""===e&&(e=t[2]+t[3]),n.push(new E([t[2],t[3]],{name:e,normalizer:c}))}),n}}const k=new Y(String.raw`(\S+|\s+)\s+([NS]\d{4}\.\d)([EW]\d{5}\.\d)`,"gu");function j(t,e){j=function(t,e){return new i(t,void 0,e)};var n=H(RegExp),r=RegExp.prototype,N=new WeakMap;function i(t,e,r){var i=n.call(this,t,e);return N.set(i,r||N.get(t)),i}function o(t,e){var n=N.get(e);return Object.keys(n).reduce((function(e,r){return e[r]=t[n[r]],e}),Object.create(null))}return W(i,n),i.prototype.exec=function(t){var e=r.exec.call(this,t);return e&&(e.groups=o(e,this)),e},i.prototype[Symbol.replace]=function(t,e){if("string"==typeof e){var n=N.get(this);return r[Symbol.replace].call(this,t,e.replace(/\$<([^>]+)>/g,(function(t,e){return"$"+n[e]})))}if("function"==typeof e){var i=this;return r[Symbol.replace].call(this,t,(function(){var t=[];return t.push.apply(t,arguments),"object"!=typeof t[t.length-1]&&t.push(o(t,i)),e.apply(this,t)}))}return r[Symbol.replace].call(this,t,e)},j.apply(this,arguments)}function W(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}function H(t){var e="function"==typeof Map?new Map:void 0;return(H=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return J(t,arguments,q(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Z(r,t)})(t)}function J(t,e,n){return(J=z()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var N=new(Function.bind.apply(t,r));return n&&Z(N,n.prototype),N}).apply(null,arguments)}function z(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function q(t){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}const Q=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];const tt=Object.freeze({pypdf2:3,pdfjs:4}),et=Object.freeze({S4:1,NVP:2}),nt=n(2);class rt{constructor(t=""){console.assert(t.startsWith("_PDFJS_"),"invalid text file"),this.text=t,this.pdfParser=tt.pdfjs,this.ofpType=et.S4,t.includes("--FLIGHT SUMMARY--")&&(this.ofpType=et.NVP);try{this.infos=function(t){let e=j(/(AF[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]+[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+)([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})\/([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]+\/[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})z[\0-\t\x0B\f\x0E-\u2027\u202A-\u{10FFFF}]*OFP[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+([0-9]+[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{0,8})/u,{flight:1,departure:2,destination:3,datetime:4,ofp:5}),n=e.exec(t);null===n&&(e=j(/(AF[\0-\t\x0B\f\x0E-\u2027\u202A-\u{10FFFF}]+)([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})\/([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]+\/[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]{4})z[\0-\t\x0B\f\x0E-\u2027\u202A-\u{10FFFF}]*OFP[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+([\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uFEFE\uFF00-\u{10FFFF}]+)Main/u,{flight:1,departure:2,destination:3,datetime:4,ofp:5}),n=e.exec(t));let{flight:r,departure:N,destination:i,datetime:o,ofp:u}=n.groups;const[s]=o.split("/",1),a=parseInt(o.substring(0,2),10),l=Q.indexOf(o.substring(2,5)),c=parseInt(o.substring(5,9),10),A=parseInt(o.substring(10,12),10),E=parseInt(o.substring(12,14),10),d=t.extract("ATC FLIGHT PLAN","TRACKSNAT").extract("(",")",!1,!0);e=new RegExp(String.raw`-${i}(\d{4})\s`,"u"),n=e.exec(d);let O=[1,0];null===n?console.log("flight duration not found, arbitrary set to 1 hour"):O=[parseInt(n[1].substring(0,2),10),parseInt(n[1].substring(2,4),10)],e=new RegExp(String.raw`-${i}.+\s(\S{4})\s(\S{4})\s?[\n\-]`,"u"),n=e.exec(d);let p=[];null!==n?(p.push(n[1]),p.push(n[2])):(e=new RegExp(String.raw`-${i}.+\s(\S{4})\s?[\n\-]`,"u"),n=e.exec(d),null!==n&&p.push(n[1])),e=/RALT\/((?:\S{4}[ \n])+)/u,n=e.exec(d);let h=[];null!==n&&h.push(n[1].split(/\s/u));const I=t.extract("FLIGHT SUMMARY","Generated");e=/\s(\d{2})(\d{2})\s+TAXI IN/u,n=e.exec(I);let f=15;return null===n?console.log("taxitime not found, arbitrary set to 15mn"):f=60*parseInt(n[1],10)+parseInt(n[2],10),{flight:r.replace(/\s/gu,""),departure:N,destination:i,datetime:new Date(Date.UTC(c,l,a,A,E)),datetime2:new Date(Date.UTC(c,l,a,A+O[0],E+O[1]+f)),date:s,ofp:u.replace("©",""),duration:O,alternates:p,ralts:h,taxitime:f,rawfpl:d}}(t)}catch(t){console.error(t);try{window&&window.alert("Erreur: {error}")}catch(t){}throw t}this.cache=function(t,e){return void 0===this.cacheStore&&(this.cacheStore={}),void 0===this.cacheStore[t]&&(this.cacheStore[t]=e()),this.cacheStore[t]}}get description(){const t=this.infos;return`${t.flight} ${t.departure}-${t.destination} ${t.date} ${t.datetime.toISOString().substring(11,16)}z OFP ${t.ofp}`}wptCoordinates(t="WPT COORDINATES"){const e=this.infos,n=this.ofpType===et.NVP?"----"+e.destination:"----";return this.text.extract(t,n).matchAll(k)}wptCoordinatesAlternate(t="WPT COORDINATES",e=!1){const n=this.ofpType===et.NVP?"--WIND INFORMATION--":"ATC FLIGHT PLAN";function r(t){return[...t].reverse().join("")}const N=r(this.text.extract(t,n,e)).split("----",1)[0];return r(N).matchAll(k)}isMyTrack(t){return-1!==this.fplRoute.indexOf(P.label(t))}trackParser(){let t="";try{t=this.text.extract("ATC FLIGHT PLAN","NOTES:").extract(")")}catch(t){return[]}let e=[];if(t.includes("REMARKS:")&&(t=t.split("REMARKS:",1)[0],t=t.split("Generated at",1)[0]),t.includes(" LVLS ")){const n=t.split(/(?:\s|[^A-Z\d])([A-Z])\s{3}/gu).slice(1);for(let t=0,r=n.length;t<r;t+=2)e.push([n[t],n[t+1]])}else t.includes("TRACKS")&&(console.error("Unknown TRACKSNAT message format"),console.log(t));return e}get tracks(){return this.cache("tracks",()=>{let t=this.trackParser();const e=/(\d{2,4}[NS]\d{3,5}[EW]|[NESW]\d{4}|\d[NESW]\d{3}[^EW])/u;let n={},r=[],N=[];return t.map(([,t])=>{t.split(" LVLS ",1)[0].split(" ").forEach(t=>{const n=t.trim();""!==n&&null===e.exec(n)&&N.push(n)})}),N.forEach(t=>{const e=nt[t];void 0!==e&&(n[t]=new E(e,{name:t}))}),t.forEach(([t,N])=>{let i=[],o=!0;const u=this.isMyTrack(t);let s=u?{}:n;u&&this.route.points.forEach(t=>{""!==t.name&&(s[t.name]=t)}),N.split(" LVLS ",1)[0].split(" ").forEach(t=>{const n=t.trim();if(""!==n)if(null!==e.exec(n))i.push(new E(n,{name:n,normalizer:A}));else{let t=s[n];void 0!==t?i.push(new E(t,{name:n})):o=!1}}),r.push(new P(i,{name:"NAT "+t,description:N,isMine:u,isComplete:o}))}),r})}fpl(){const t=this.infos;let e=t.rawfpl.extract("-"+t.departure,"-"+t.destination,!1);e=e.substring(e.indexOf(" ")+1);let n=[t.departure];return e.split(" ").map(t=>t.trim()).forEach(t=>{""===t||t.startsWith("-N")||n.push(t)}),n.push(t.destination),n}get fplRoute(){return this.cache("fplRoute",()=>this.fpl().map(t=>t.includes("/")?t.split("/",1)[0]:t))}get route(){return this.cache("route",()=>new g(this.wptCoordinates()))}lidoRoute(){return this.cache("lidoRoute",()=>{const t=[],e=[];this.route.points.forEach(n=>{e.push(n.dm),""===n.name||null!==/\d+/u.exec(n.name)?t.push(n.dm):t.push(n.name)});let n=[],r=this.fplRoute,N=r.length;if(N<2)return t;let i=r[0],o=r[N-1],u=r.slice(1,-1),s=u.length;for(let r=0;r<s;r+=1){let N=u[r],i=t.indexOf(N);if(-1!==i){n=e.slice(1,i).concat(u.slice(r));break}}let a=t.slice().reverse(),l=n.slice().reverse(),c=n.length;for(let t=0;t<c;t+=1){let r=l[t],N=a.indexOf(r);if(-1!==N){t>0&&(n=n.slice(0,-t)),n=n.concat(e.slice(-N,-1));break}}return this.tracks.forEach(t=>{if(t.isMine){let e=t.name.slice(-1),r=function(t,e,n){let r=[];for(;;){let N=t.indexOf(e);if(-1===N)return r;t.splice(N,1,...n.slice(n.indexOf(t[N-1])+1,n.indexOf(t[N+1]))),r=t}}(n,P.label(e),t.points.map(t=>t.name));r.length>0&&(n=r)}}),n.push(o),n.unshift(i),n=n.concat(...this.infos.alternates),n=n.concat(...this.infos.ralts),n})}}var Nt=n(0),it=n.n(Nt);const ot={1:5e3,2:1260,3:156,4:40,5:4.8,6:1.22,7:.152,8:.038};class ut{constructor(t=3){this.precision=t,this.gridSize=s(ot[t.toString()]),this.data={}}*getNearestPointsDirty(t,e,n=s){if(null!==n&&(e=n(e)),e>this.gridSize/2){let t=0;for(const[n,r]of Object.entries(ot))if(e>s(r)/2){t=parseInt(n,10)-1;break}throw new Error(`Too large radius, please rebuild GeoHashGrid with precision="${t}"`)}const r=it.a.encode(t.latitude,t.longitude,this.precision);let N=it.a.neighbors(r);N.push(r);for(const t of N)if(t in this.data)for(const[e,n,r]of this.data[t])yield new E([n,r],{name:e})}*getNearestPoints(t,e,n=s){null!==n&&(e=n(e));for(const r of this.getNearestPointsDirty(t,e,null)){let N=r.distanceTo(t,null);N<=e&&(null!==n&&(N/=n(1)),yield[r,N])}}}function st(t,e,{name:n="",description:r="",segmentSize:N=300,algorithm:o="xtd"}={}){const u=t.gridSize*i/1e3/2-.1;const a=e=>{let n=[...t.getNearestPoints(e,u)];return n.length>0?(n=n.sort((t,e)=>t[1]-e[1]),n.map(t=>t[0].name).indexOf(e.name)>=0?[e,0]:[n[0][0],n[0][1]]):[null,null]},l=(t,e,n)=>{for(let r=e-1;r>t;r-=1){const N=n[r].ogimet.xtd_to([n[r].fpl,n[r+1].fpl]),i=n[r].fpl.xtd_to([n[t].ogimet,n[e].ogimet]);if(Math.abs(i)>Math.abs(N))return r}return null},c=t=>{const e=[t[0]];let n=-1;for(;n<t.length-1;){n+=1;let r=n+2;for(;r<=t.length-1;){let N=l(n,r,t);if(null!==N){e.map(t=>t.ogimet.name).indexOf(t[N].ogimet.name)<0&&e.push(t[N]),n=N-1;break}r+=1}}return e.push(t[t.length-1]),e.length<t.length?c(e):e};let A=[];const E={};for(const t of e.split(60,{converter:s,preserve:!0}).points){const[e,n]=a(t);null!==e&&(e.name in E?E[e.name][0]>n&&(E[e.name]=[n,t]):E[e.name]=[n,t],A.push({fpl:t,ogimet:e}))}A=A.filter(t=>E[t.ogimet.name][1]==t.fpl),A=c(A);const d="xtd"===o?t=>{let e=0,n=null,r=t.length-1;for(let N=1;N<r;N+=1){const r=Math.abs(t[N].fpl.xtd_to([t[N-1].ogimet,t[N+1].ogimet]));(null===n||r<e)&&(n=N,e=r)}return n}:t=>{let e=0,n=null,r=t.length-1;for(let N=1;N<r;N+=1){const r=Math.abs(t[N-1].ogimet.course_to(t[N].ogimet)-t[N-1].ogimet.course_to(t[N+1].ogimet));(null===n||r<e)&&(n=N,e=r)}return n};for(;A.length>21;){const t=d(A);A=A.slice(0,t).concat(A.slice(t+1))}return new g(A.map(t=>t.ogimet)).split(N,{preserve:!0,name:n,description:r})}function at(t,e,n="xtd"){const r=t.infos.taxitime,N=t.infos.datetime.valueOf()/1e3+60*r,i=(new Date).valueOf()/1e3,o=Math.round(Math.max(N,i)),u=new Date(1e3*o),s=new Intl.DateTimeFormat("en",{year:"2-digit",month:"short",day:"2-digit",hour:"2-digit",minute:"2-digit"}),[{value:a},,{value:l},,{value:c},,{value:A},,{value:E}]=s.formatToParts(u),d=`Route Gramet ${t.infos.flight} ${t.infos.departure}-${t.infos.destination} ${l}${a}${c} ${A}:${E}z OFP ${t.infos.ofp}`;let O=t.infos.duration[0]+1;const p=[...t.infos.rawfpl.matchAll(/F(\d{3})\s/gu)].map(t=>1*t[1]);let h=300;p&&p.length&&(h=Math.round(p.reduce((t,e)=>t+e,0)/p.length));const I=st(e,t.route,{name:d,algorithm:n}),f=I.points.filter(t=>""!==t.name).map(t=>t.name);I.description=f.join(" ");const S=`http://www.ogimet.com/display_gramet.php?lang=en&hini=0&tref=${o}&hfin=${O}&fl=${h}&hl=3000&aero=yes&wmo=${f.join("_")}&submit=submit`;return{tref:o,name:d,route:I,wmo:f,url:S}}const lt="1.1.10"}])}));
//# sourceMappingURL=lidojs.min.js.map